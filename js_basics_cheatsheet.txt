##Data types
There are eight basic data types in JavaScript.

1. Number
2. BigInt: In JavaScript, the “number” type cannot represent integer values larger than 253 (or less than -253 for negatives)
3. String
4. Boolean: true or false
5. null
6. undefined
7. Symbol
8. Object

Note: We can use typeof() operator to check the data type.



##Number
Rounding Numbers
1. Math.floor() - Rounds to the lower bound. Rounds down: 3.1 becomes 3
2. Math.ceil() - Rounds to the upper bound. Rounds up: 3.1 becomes 4
3. Math.round() - Rounds to the nearest value. Rounds to the nearest integer: 3.1 becomes 3, 3.6 becomes 4
4. Match.trunc() - Removes anything after the decimal point without rounding
5. num.toFixed(decimals points) - Rounds the number to n digits after the point and returns a string representation of the result.

Other Match Functions
6. Math.random() - Returns a random number from 0 to 1
7. Math.max(arguments) - Returns the max number from the provide argument
8. Math.pow(base, exponent) - Returns n raised the given power

Other Math Functions
9. Number.MAX_SAFE_INTEGER
10. Number.MIN_SAFE_INTEGER
11. isNaN(variable)  -> To check if the value is not a number. Would return true if not a number



##String Char Unicode Values
1. '0' = 49
    '9' = 57

2. 'a' = 97
    'z' = 122



##String Methods
1. str.length

Finding a string part
2. str.indexOf('hello') - Returns the first index of the text occurance in the string
3. str.lastIndexOf('hello') -  Returns the last index of the text occurance in the string

Searching a String
4. str.search('hello') - Searches and returns the position of the match. Use this for powerful search like regex instead of indexOf()

Extracting String Parts
5. str.slice(start, end) - extracts a part of a string and returns the extracted part in a new string.
6. str.substring(start, end) - substring() is similar to slice(). The difference is that substring() cannot accept negative indexes.
7. str.substr(start, length) - substr() is similar to slice(). The difference is that the second parameter specifies the length of the extracted part.

Replacing String Content
8. str.replace(toReplace/Regex, newValue) - The replace() method replaces a specified value with another value in a string

Converting to Upper and Lower Case
9. str.toUpperCase()
10. str.toLowerCase()

The concat() Method
11. str.conact() - concat() joins two or more strings

Remove Whitespaces
12. str.trim() -  trim() method removes whitespace from both sides of a string

Extracting String Characters
13. str.charAt(position)
14. str.charCodeAt() - charCodeAt() method returns the unicode of the character at a specified index in a string.
15. str[index] - ECMAScript 5 (2009) allows property access [ ] on strings

16. str.split(delimiter) - Splits the string using the provided delimiter and puts it into an array.
17. str.charCodeAt(index) - Provides the unicode value of the character on that index



##Regex Methods
1. regex.test(String) - test() searches a string for a pattern, and returns true or false, depending on the result.
2. regex.exec(String) - searches a string for a specified pattern, and returns the found text as an object.



##Logical Operators

1. || => OR
2. && => AND
3. ! => NOT



##Type Conversion
1. String Conversion: String(value)
2. Numeric Conversion: Number(value)
3. Boolean Conversion: Boolean(value)



##Loops
1. While:
while(true){

}

2. Do While:
do{

}while();

3. For:
for(let i=0; i<10; i++){

}

4. for in loop: - It iterates over the list of elements and returns the key
for(let key in object){

}

5. for of loop: - It iterates over the list of elements and returns the value instead of returning the key
for(let value of array){

}

6. forEach - Can be used to iterate over Array/Objects etc
arr.forEach((item, index, array) => {
    //Do something with the array values
});


Note: We can break the loop using break; statement
- When we need to iterate over an array – we can use forEach, for or for..of.
- When we need to iterate and return the data for each element – we can use map
- arr.reduce() - It is used to reduce and calculate a single value based on the array



##Functions

1. Function Declaration:
function hello(){

}

2. Function Expression
let hello = function(){

};

3. Arrow Function
let hello = () => {

};



##Objects
Objects are defined using curly braces {}

Methods etc available on objects:
1. in - User to check for existence of a key in the object
Eg: key in object

2. for in loop - Executes the for loop for every key in the object
for(let key in object){
    ...do something
}

- Order of data retrieval from objects:
If key are integer then data is store in ascending Order.
If keys are non-integer then data is stores in the same order as inserted.

- Difference between Object and other JS datatypes:
Objects in JS are reference types whereas other datatypes in js are value type.



##Maps : Key Value Pair
1. Creating a new map:
var map = new Map();

2. Setting a new value inside the map
map.set(key, value);

3. Getting a value from the map
map.get(key);

4. Checking if the key exists in the map - Returns true or false
map.has(key);

5. Deleting a key from the map
map.delete(key)

6. Clear the entire map
map.clear()

7. Checking the size of the map
map.size;

8. Getting all the keys of the map. But this returns a iterator object, so it cannot be displayed as is and should be displayed using a iterator.
map.keys();
eg:
for(let key of map.keys()){
    console.log(key);
}

9. Getting all the values of the map. But this returns a iterator object, so it cannot be displayed as is and should be displayed using a iterator.
map.values();
eg:
for(let value of map.values){
    console.log(value);
}

10. Iterating and getting both key and value from the map:
for(let [key, value] of map){

}



##Sets : Contains unique values only
Sets are used to store the unique values

1. Creating a new set
var set = new Set();

2. Adding a value to a set
set.add(Value);

3. Checking if value exists in set or not
set.has(Value);

4. Check the size of the set
set.size;

5. Deleting value from the set
set.delete(value)

6. Clearing all the values from the set
set.clear()

7. Getting values from set - Note: Sets are iterable objects, we have to iterate over sets to get the values
for(let value of set){

}



##Array

Add/remove items
1. arr.push(..items) - Adds items to the end of the array
2. arr.pop() - Remove the item from the end of the array
3. arr.shift() - Removes an item from the beginning of the array
4. arr.unshift() - Adds item to the beginning of the array
5. arr.splice(startInex, no Of Elements to remove, list of elememts to add after removal) - This method can do everything: insert, remove and replace elements.
6. arr.slice(startIndex, endIndex) - Creates a new array with the start and end index values.
7. arr.concat([new values]) - Creates a new array which includes the values from arr plus additionally provided values.
8. arr.length - Returns the length of the array

Iterate over an Array
9. arr.forEach((item, index, array) => {
    //Do something with the array values
});

Searching in Array
10. arr.indexOf(item, from) - Searches and returns the index of item starting from index from, if available in the array else returns -1
11. arr.lastIndexOf(item, from) - Same as indexOf except it starts searching from right to left
12. arr.includes(item, from) - Searches for the item from the index starting from, returns true if found
13. arr.find(item => item.id == 1) - It return the item if the value is found and stops the iteration, else undefined is returned
14. arr.findIndex() - It returns the index if value is found else returns -1
15. arr.filter( item => item.id < 3) - Returns an array containing the values matching the condition.

Transform an Array
16. arr.map() - It calls the function for each element of the array and returns the array of results.
17. arr.sort()  - Sorts the array, elements are converted to strings for comparisons. We should provide our own function as argument if we want to sort the array using our own logic.
Eg:
function compareNumeric(a, b) {
  if (a > b) return 1;
  if (a == b) return 0;
  if (a < b) return -1;
}

let arr = [ 1, 2, 15 ];

arr.sort(compareNumeric);

alert(arr);  // 1, 2, 15

18. arr.reverse() - Reverses the order of the array
19. arr.split(delimiter) - It splits the string into an array by the given delimiter
20. arr.join(delimiter) - Does the reverse to split. It creates a string of arr items joined by glue between them.
21. arr.reduce() - It is used to reduce and calculate a single value based on the array
Eg:
let value = arr.reduce(function(accumulator, item, index, array) {
  // ...
}, [initial]);

--
let arr = [1, 2, 3, 4, 5];

let result = arr.reduce((sum, current) => sum + current, 0);

alert(result); // 15

22. arr.reduceRight() - Does the same as reduce(), but goes from right to left.
23. arr.isArray() - It returns true if the value is an array, and false otherwise.
24. arr.join('') - Join the array into a string without any commas
25. Array(length) - To create an Array of a specific length.



##JSON

1. JSON.stringify(object) - Converts an object to JSON
2. JSON.parse(string) - Converts JSON to an Object
