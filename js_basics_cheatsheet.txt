##Data types
There are eight basic data types in JavaScript.

1. Number
2. BigInt: In JavaScript, the “number” type cannot represent integer values larger than 253 (or less than -253 for negatives)
3. String
4. Boolean: true or false
5. null
6. undefined
7. Object
8. Symbol

Note: We can use typeof() operator to check the data type.



##String Methods
1. str.length

Finding a string part
2. str.indexOf('hello') - Returns the first index of the text occurance in the string
3. str.lastIndexOf('hello') -  Returns the last index of the text occurance in the string

Searching a String
4. str.search('hello') - Searches and returns the position of the match. Use this for powerful search like regex instead of indexOf()

Extracting String Parts
5. str.slice(start, end) - extracts a part of a string and returns the extracted part in a new string.
6. str.substring(start, end) - substring() is similar to slice(). The difference is that substring() cannot accept negative indexes.
7. str.substr(start, length) - substr() is similar to slice(). The difference is that the second parameter specifies the length of the extracted part.

Replacing String Content
8. str.replace(toReplace, newValue) - The replace() method replaces a specified value with another value in a string

Converting to Upper and Lower Case
9. str.toUpperCase()
10. str.toLowerCase()

The concat() Method
11. str.conact() - concat() joins two or more strings

Remove Whitespaces
12. str.trim() -  trim() method removes whitespace from both sides of a string

Extracting String Characters
13. str.charAt(position)
14. str.charCodeAt() - charCodeAt() method returns the unicode of the character at a specified index in a string.
15. str[index] - ECMAScript 5 (2009) allows property access [ ] on strings



##Regex Methods

1. str.search(Regex/Pattern) - search() method searches a string for a specified value and returns the position of the match.
2. str.replace(To replace Regex/Pattern, New Pattern) - replace() method replaces a specified value with another value in a string.
3. regex.test(String) - test() searches a string for a pattern, and returns true or false, depending on the result.
4. regex.exec(String) - searches a string for a specified pattern, and returns the found text as an object.



##Logical Operators

1. || => OR
2. && => AND
3. ! => NOT



##Type Conversion
1. String Conversion: String(value)
2. Numeric Conversion: Number(value)
3. Boolean Conversion: Boolean(value)



## Loops
1. While:
while(true){

}

2. Do While:
do{

}while();

3. For:
for(let i=0; i<10; i++){

}

4. for in loop: - It iterates over the list of elements and returns the key 
for(let key in object){

}

5. for of loop: - It iterates over the list of elements and returns the value instead of returning the key
for(let value of array){

}


Note: We can break the loop using break; statement



##Functions

1. Function Declaration:
function hello(){

}

2. Function Expression
let hello = function(){

};

3. Arrow Function
let hello = () => {

};



###Objects
Objects are defined using curly braces {}

Methods etc available on objects:
1. in - User to check for existence of a key in the object
Eg: key in object

2. for in loop - Executes the for loop for every key in the object
for(let key in object){
    ...do something
}

- Order of data retrieval from objects:
If key are integer then data is store in ascending Order.
If keys are non-integer then data is stores in the same order as inserted.

- Difference between Object and other JS datatypes:
Objects in JS are reference types whereas other datatypes in js are value type.



##Maps
1. Creating a new map:
var map = new Map();

2. Setting a new value inside the map
map.set(key, value);

3. Getting a value from the map
map.get(key);

4. Checking the size of the map
map.size;

5. Getting all the keys of the map. But this returns a iterator object, so it cannot be displayed as is and should be displayed using a iterator.
map.keys();
eg:
for(let key of map.keys()){
    console.log(key);
}

6. Getting all the values of the map. But this returns a iterator object, so it cannot be displayed as is and should be displayed using a iterator.
map.values();
eg:
for(let value of map.values){
    console.log(value);
}

7. Iterating and getting both key and value from the map:
for(let [key, value] of map){

}



##Sets
Sets are used to store the unique values

1. Creating a new set
var sets = new Set();

2. Adding a value to a set
set.add(Value);

3. Getting values from set - Note: Sets are iterable objects, we have to iterate over sets to get the values
for(let value of sets){

}

4. Checking if value exists in set or not
sets.has(Value);

5. Check the size of the set
sets.size;